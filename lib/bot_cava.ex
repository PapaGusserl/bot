defmodule Bot.Cava do
  import Bot.Worker
  use Mailgun.Client,
    domain: Application.get_env(:bot, :mailgun_domain),
    key:    Application.get_env(:bot, :mailgun_key)


  ##################
  # Start commands #
  ##################
 
  def read_command(%{text: "/start", chat: %{id: id}, from: %{first_name: name, username: user}}) do
    cmd(:cava_nch, :sendMessage, %{chat_id: 415311574, text: "User #{name} with username #{user} join to Cava"})
    cmd(:cava_nch, :sendMessage, %{chat_id: id, text: Menu.Cava.start_message(), reply_markup: %{keyboard: Menu.Cava.rows(), one_time_keyboard: false } })
    :dets.insert_new(:user_of_cava, {id, name, user, %{bookmarks: ["–ó–∞–∫–ª–∞–¥–∫–∏:\n"]}, %{history: ["–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π"]}})
  end 
 
  def read_command(%{text: "/start", chat: %{id: id}, from: %{first_name: name}}) do
    cmd(:cava_nch, :sendMessage, %{chat_id: 415311574, text: "User #{name} with-out username join to Cava"})
    cmd(:cava_nch, :sendMessage, %{chat_id: id, text: Menu.Cava.start_message(), reply_markup: %{keyboard: Menu.Cava.rows() } })
    :dets.insert_new(:user_of_cava, {id, name, "no-username", %{bookmarks: ["–ó–∞–∫–ª–∞–¥–∫–∏:\n"]}, %{history: ["–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π"]}})
  end 

  ####################
  # Admin's commands #
  ####################

 def read_command(%{photo: [%{file_id: photo}, _, _, _], caption: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", chat: %{id: 415311574}}) do
   :dets.select(:user_of_cava, [{:"$1", [], [:"$1"]}])
   |>Enum.map(fn {id, _, _} -> cmd(:cava_nch, :sendPhoto, %{chat_id: id, photo: photo}) end)
 end

 def read_command(%{photo: [%{file_id: photo},  _, _], caption: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", chat: %{id: 415311574}}) do
   :dets.select(:user_of_cava, [{:"$1", [], [:"$1"]}])
   |>Enum.map(fn {id, _, _} -> cmd(:cava_nch, :sendPhoto, %{chat_id: id, photo: photo}) end)
 end

  def read_command(%{photo: [%{file_id: photo}, _, _, _], caption: caption, chat: %{id: 415311574}}) do
    :dets.insert(:menu, {caption, photo})
  end
 
  def read_command(%{text: text, chat: %{id: 415311574}}) do
    :dets.select(:user_of_cava, [{:"$1", [], [:"$1"]}])
    |>Enum.map(fn {id, _, _} -> cmd(:cava_nch, :sendMessage, %{chat_id: id, text: text}) end)
  end

 
  ###################
  # User's commands #
  ###################

  #def read_command(%{text: ""}), do:
  #def read_command(%{text: "", from: %{first_name: name}}), do:
  
  def read_command(%{location: %{latitude: lat, longitude: long}, chat: %{id: id}}) do
    {how_much, where} = find_cava("#{lat},#{long}")
    cmd(:cava_nch, :sendMessage, %{chat_id: id, text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –≤ #{where}, –¥–æ –∫–æ—Ñ–µ–π–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å #{how_much}"})
  end

  def read_command(%{text: text, chat: %{id: id}}, after_back \\ false) do
    [[name, user, %{bookmarks: bookmarks}, %{history: history }]] = :dets.match(:user_of_cava, {id , :"$1", :"$2", :"$3", :"$4"})
    if text == "–ù–∞–∑–∞–¥" do
      history = List.delete_at(history, Enum.count(history) - 1)
      :dets.insert(:user_of_cava, {id, name, user, %{bookmarks: bookmarks}, %{history: history}})
      read_command(%{text: List.last(history), chat: %{id: id}}, true)
    else
      [h|t] = history
      history = if Enum.count(history) > 10, do: t, else: history
      unless after_back, do: :dets.insert(:user_of_cava, {id, name, user, %{bookmarks: bookmarks}, %{history: history ++ [text]}})
      case text do
        "–ú–µ–Ω—é"                              -> command(id, "–í—ã–±–µ—Ä–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—é", Menu.Cava.kategories())
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π"                   -> command(id, "–í—ã–±–µ—Ä–µ—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—é", Menu.Cava.rows())
        "–ö–æ—Ñ–µ–π–Ω–∞—è –∫–∞—Ä—Ç–∞"                    -> command(id, "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–º–µ—é—â–∏–π—Å—è —É –Ω–∞—Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–æ—Ñ–µ –∏ –Ω–∞–ø–∏—Ç–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Å–ø—Ä–µ—Å—Å–æ", Menu.Cava.coffee())
        "üòã–ê–∫—Ü–∏–∏"                           -> command(id, "–ù–∞—à–∏ –∞–∫—Ü–∏–∏", Menu.Cava.discounts())
        "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"                    -> command(id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–û—Ç–∑—ã–≤: –í–∞—à –æ—Ç–∑—ã–≤\"", Menu.Cava.rows())
        "–ß–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∞"                      -> command(id, "–ù–∞—à–∏ —á–∞–∏", Menu.Cava.tea())
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —á–∞—è–º"                  -> command(id, "–ù–∞—à–∏ —á–∞–∏", Menu.Cava.tea())
        "–ó–∞–∫–ª–∞–¥–∫–∏"                          -> command(id, "#{inspect bookmarks }", Menu.Cava.rows())
        "–§–∏—Ä–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"                 -> command(id, "–§–∏—Ä–º–µ–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ Coffee Cava", Menu.Cava.firm())
        "–§–∏—Ä–º–µ–Ω–Ω—ã–π —á–∞–π"                     -> command(id, "–§–∏—Ä–º–µ–Ω–Ω—ã–µ —á–∞–∏", Menu.Cava.firm_tea())
        "–î–µ—Å–µ—Ä—Ç—ã"                           -> command(id, "–ù–∞—à–∏ –¥–µ—Å–µ—Ä—Ç—ã", Menu.Cava.deserts())
        "–•–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"                  -> command(id, "–ù–∞—à–∏ —Ö–æ–ª–æ–¥–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", Menu.Cava.cold())
        "–°–µ–Ω–¥–≤–∏—á–∏ –∏ —Å–Ω–µ–∫–∏"                  -> command(id, "–°—ã—Ç–Ω—ã–µ –∏ –ª–µ–≥–∫–∏–µ —Å–µ–Ω–¥–≤–∏—á–∏ –Ω–∞ –ª—é–±–æ–π –≤–∫—É—Å", Menu.Cava.snack())
        "–ß–∞–π Ronnenfeldt –≤ —á–∞–π–Ω–∏–∫–µ"         -> command(id, "–ê—Ä–æ–º–∞—Ç–Ω—ã–µ –Ω–µ–º–µ—Ü–∫–∏–µ —á–∞–∏", Menu.Cava.ron_tea())
        "–ß–∞–π Ronnenfeldt –≤ —á–∞—à–∫–µ"           -> command(id, "–ê—Ä–æ–º–∞—Ç–Ω—ã–µ –Ω–µ–º–µ—Ü–∫–∏–µ —á–∞–∏", Menu.Cava.ron_tea_cup())
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É"  -> command(id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n –¢–µ–º–∞:–í–∞—à–∞_—Ç–µ–º–∞\n–¢–µ–∫—Å—Ç: –í–∞—à_—Ç–µ–∫—Å—Ç", Menu.Cava.rows())
        "–í –∑–∞–∫–ª–∞–¥–∫–∏"                        -> :dets.insert(:user_of_cava, {id, name, user, %{bookmarks: bookmarks ++ [List.last(history)]}, %{history: history}})
                                             command(id, "–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –í–∞—à–∏ –∑–∞–∫–ª–∞–¥–∫–∏", Menu.Cava.funcs())
        _                                   -> 
          file_id = :dets.match(:menu, {text, :"$1"})
          theme = ~r/–¢–µ–º–∞:/
          recens = ~r/–û—Ç–∑—ã–≤:/
          letter = ~r/–¢–µ–∫—Å—Ç:/
          if file_id==[] do
            if text =~ theme && text =~ letter do
              send_letter(text)
              cmd(:cava_nch, :sendMessage, %{chat_id: id, text: "–í–∞—à–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"})
            else
              if text =~ recens do
                cmd(:cava_nch, :sendMessage, %{chat_id: id, text: "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –æ—Ç–∑—ã–≤"})
                cmd(:cava_nch, :sendMessage, %{chat_id: 415311574, text: "User #{user} write:\n #{text}"})
              else
                cmd(:cava_nch, :sendMessage, %{chat_id: id, text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, #{name}, –Ω–∞—Å—á–µ—Ç —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —è –ø–æ–∫–∞ –Ω–µ –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å, –Ω–æ —á—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ—à–µ–Ω–∏—è –í–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã, –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @papa_gusserl "})
              end
            end
          else
            [[photo]] = file_id
            cmd(:cava_nch, :sendPhoto, %{chat_id: id, photo: photo, reply_markup: %{keyboard: Menu.Cava.funcs()}})
          end
      end
    end   
  end

  def command(id, text, keyboard), do: cmd(:cava_nch, :sendMessage, %{chat_id: id, text: text, reply_markup: %{keyboard: keyboard}})

    

    ###############
    # Private Box #
    ###############

     def  send_letter(text), do:   
       send_email to: "akhtyamov.vlad@outlook.com",
                from: "vlad@papagusserl.com",
             subject: "Email from CavaBot",
                text: text 

     def find_cava(lng) do
       it_park_chelny = "55.738447,52.450314"
       sity_centr = "55.741005,52.414335"
       objects = it_park_chelny <> "|" <> sity_centr
       %{it: dist, centr: dist2} = Bot.Dist.API.get(lng, objects) 
       {it, _} = Float.parse(dist)
       {centr, _} = Float.parse(dist2)
       if it < centr do
         {dist, "–ò–¢ –ø–∞—Ä–∫, –ö–æ—Ä–ø—É—Å –ê, 1 —ç—Ç–∞–∂"}
       else
         {dist2, "–ë–∏–∑–Ω–µ—Å –¶–µ–Ω—Ç—Ä 2/18, –ö–æ—Ä–ø—É—Å –ë, 1 —ç—Ç–∞–∂"}
       end
     end

end

